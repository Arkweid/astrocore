extern crate serde_xdr;
use astrocore::xdr;
use serde_xdr::from_bytes;

#[test]
fn authenticated_message() {
    let xdr_input = vec![
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 8, 0, 0, 0, 0, 153, 154, 41, 123, 179, 182,
        221, 221, 104, 154, 132, 171, 163, 46, 3, 152, 245, 62, 211, 205, 58, 253, 65, 129, 99,
        193, 1, 164, 30, 172, 186, 35, 0, 0, 0, 100, 0, 7, 62, 39, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 1, 72, 79, 84, 0, 0, 0, 0, 0, 35, 228, 112,
        247, 212, 61, 85, 185, 128, 73, 84, 51, 107, 76, 164, 5, 190, 118, 159, 220, 106, 13, 167,
        101, 67, 154, 105, 207, 69, 247, 124, 112, 127, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0,
        0, 0, 0, 0, 1, 30, 172, 186, 35, 0, 0, 0, 64, 36, 79, 126, 125, 238, 169, 21, 219, 108,
        170, 53, 87, 224, 146, 40, 247, 67, 191, 111, 84, 134, 250, 51, 172, 70, 106, 85, 89, 51,
        178, 211, 216, 191, 44, 101, 98, 217, 153, 101, 10, 121, 161, 55, 15, 156, 247, 168, 97,
        217, 14, 10, 148, 167, 111, 216, 165, 16, 67, 29, 119, 17, 161, 2, 9, 177, 97, 21, 124,
        161, 84, 124, 228, 123, 252, 0, 209, 92, 89, 47, 135, 108, 106, 202, 194, 216, 215, 179,
        15, 145, 255, 71, 21, 213, 239, 227, 79,
    ];

    let result: Result<xdr::AuthenticatedMessage, serde_xdr::CompatDeserializationError> =
        from_bytes(xdr_input);

    assert!(result.is_ok(), println!("{:?}", result));
}

#[test]
fn stellar_message() {
    let xdr_input = vec![
        0, 0, 0, 8, 0, 0, 0, 0, 153, 154, 41, 123, 179, 182, 221, 221, 104, 154, 132, 171, 163, 46,
        3, 152, 245, 62, 211, 205, 58, 253, 65, 129, 99, 193, 1, 164, 30, 172, 186, 35, 0, 0, 0,
        100, 0, 7, 62, 39, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6,
        0, 0, 0, 1, 72, 79, 84, 0, 0, 0, 0, 0, 35, 228, 112, 247, 212, 61, 85, 185, 128, 73, 84,
        51, 107, 76, 164, 5, 190, 118, 159, 220, 106, 13, 167, 101, 67, 154, 105, 207, 69, 247,
        124, 112, 127, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 1, 30, 172, 186, 35,
        0, 0, 0, 64, 36, 79, 126, 125, 238, 169, 21, 219, 108, 170, 53, 87, 224, 146, 40, 247, 67,
        191, 111, 84, 134, 250, 51, 172, 70, 106, 85, 89, 51, 178, 211, 216, 191, 44, 101, 98, 217,
        153, 101, 10, 121, 161, 55, 15, 156, 247, 168, 97, 217, 14, 10, 148, 167, 111, 216, 165,
        16, 67, 29, 119, 17, 161, 2, 9,
    ];

    let result: Result<xdr::StellarMessage, serde_xdr::CompatDeserializationError> =
        from_bytes(xdr_input);

    assert!(result.is_ok(), println!("{:?}", result));
}

#[test]
fn transaction() {
    let xdr_input = vec![
        0, 0, 0, 0, 153, 154, 41, 123, 179, 182, 221, 221, 104, 154, 132, 171, 163, 46, 3, 152,
        245, 62, 211, 205, 58, 253, 65, 129, 99, 193, 1, 164, 30, 172, 186, 35, 0, 0, 0, 100, 0, 7,
        62, 39, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 1,
        72, 79, 84, 0, 0, 0, 0, 0, 35, 228, 112, 247, 212, 61, 85, 185, 128, 73, 84, 51, 107, 76,
        164, 5, 190, 118, 159, 220, 106, 13, 167, 101, 67, 154, 105, 207, 69, 247, 124, 112, 127,
        255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0,
    ];

    let result: Result<xdr::Transaction, serde_xdr::CompatDeserializationError> =
        from_bytes(xdr_input);

    assert!(result.is_ok(), println!("{:?}", result));
}

#[test]
fn transaction_account() {
    let xdr_input = vec![
        0, 0, 0, 0, 153, 154, 41, 123, 179, 182, 221, 221, 104, 154, 132, 171, 163, 46, 3, 152,
        245, 62, 211, 205, 58, 253, 65, 129, 99, 193, 1, 164, 30, 172, 186, 35,
    ];

    let result: Result<xdr::AccountId, serde_xdr::CompatDeserializationError> =
        from_bytes(xdr_input);

    assert!(result.is_ok(), println!("{:?}", result));
}

#[test]
fn memo() {
    let xdr_input = vec![0, 0, 0, 0];

    let result: Result<xdr::Memo, serde_xdr::CompatDeserializationError> = from_bytes(xdr_input);

    assert!(result.is_ok(), println!("{:?}", result));
}

#[test]
fn operation() {
    let xdr_input = vec![
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 1, 72, 79, 84, 0, 0, 0, 0, 0, 35, 228, 112,
        247, 212, 61, 85, 185, 128, 73, 84, 51, 107, 76, 164, 5, 190, 118, 159, 220, 106, 13, 167,
        101, 67, 154, 105, 207, 69, 247, 124, 112, 127, 255, 255, 255, 255, 255, 255, 255,
    ];

    let result: Result<Vec<xdr::Operation>, serde_xdr::CompatDeserializationError> =
        from_bytes(xdr_input);

    assert!(result.is_ok(), println!("{:?}", result));
}

#[test]
fn seq_num() {
    let xdr_input = vec![0, 7, 62, 39, 0, 0, 0, 1];

    let result: Result<xdr::SequenceNumber, serde_xdr::CompatDeserializationError> =
        from_bytes(xdr_input);

    assert!(result.is_ok(), println!("{:?}", result));
}

#[test]
fn transaction_ext() {
    let xdr_input = vec![0, 0, 0, 0];

    let result: Result<xdr::TransactionExt, serde_xdr::CompatDeserializationError> =
        from_bytes(xdr_input);

    assert!(result.is_ok(), println!("{:?}", result));
}

#[test]
fn transaction_fee() {
    let xdr_input = vec![0, 0, 0, 0, 0, 0, 0, 100];

    let result: Result<xdr::Uint32, serde_xdr::CompatDeserializationError> = from_bytes(xdr_input);

    assert!(result.is_ok(), println!("{:?}", result));
}

#[test]
fn authenticated_message_1() {
    let xdr_input = vec![
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 8, 0, 0, 0, 0, 43, 181, 98, 141, 67, 157,
        182, 37, 210, 175, 182, 187, 77, 114, 181, 235, 141, 33, 236, 113, 129, 38, 153, 212, 151,
        159, 36, 91, 248, 88, 148, 82, 0, 0, 1, 244, 0, 7, 79, 237, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 9, 65, 100, 100, 32, 115, 109, 97, 114, 116, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0,
        0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 150, 223, 232, 243, 249, 172, 98, 35, 110, 15,
        43, 145, 101, 111, 245, 112, 242, 249, 195, 184, 134, 202, 75, 98, 33, 83, 212, 79, 152,
        205, 26, 152, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 188, 67, 253,
        59, 114, 109, 200, 12, 85, 140, 216, 218, 41, 193, 237, 213, 105, 185, 216, 99, 147, 126,
        14, 190, 76, 104, 230, 246, 12, 241, 53, 38, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 1, 23, 180, 245, 27, 173, 31, 223, 100, 232, 108, 189, 212, 18, 100, 249,
        104, 89, 220, 13, 8, 225, 103, 52, 170, 243, 237, 205, 94, 236, 174, 197, 123, 0, 0, 0, 2,
        0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 45, 234, 50, 138, 131, 28, 68, 149,
        234, 174, 252, 194, 186, 119, 31, 178, 17, 4, 235, 174, 147, 169, 239, 95, 199, 115, 22,
        15, 228, 100, 45, 255, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 8,
        10, 182, 55, 152, 241, 157, 172, 207, 16, 230, 137, 53, 242, 141, 93, 191, 213, 220, 140,
        42, 63, 111, 26, 209, 170, 124, 224, 16, 167, 255, 123, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1,
        248, 88, 148, 82, 0, 0, 0, 64, 144, 95, 80, 156, 145, 115, 242, 171, 89, 144, 47, 119, 39,
        72, 227, 67, 49, 183, 147, 73, 83, 90, 25, 91, 48, 172, 11, 168, 231, 9, 196, 111, 37, 20,
        71, 75, 227, 199, 191, 231, 49, 157, 247, 157, 211, 78, 81, 126, 204, 16, 240, 191, 241,
        110, 237, 130, 83, 37, 220, 140, 100, 56, 52, 14, 177, 224, 11, 129, 148, 42, 38, 0, 93,
        238, 204, 50, 227, 233, 199, 53, 31, 27, 100, 202, 64, 3, 185, 183, 202, 39, 111, 237, 112,
        136, 45, 83,
    ];

    let result: Result<xdr::AuthenticatedMessage, serde_xdr::CompatDeserializationError> =
        from_bytes(xdr_input);

    assert!(result.is_ok(), println!("{:?}", result));
}

#[test]
fn authenticated_message_2() {
    let xdr_input = vec![
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 0, 0, 0, 8, 0, 0, 0, 0, 43, 181, 98, 141, 67, 157,
        182, 37, 210, 175, 182, 187, 77, 114, 181, 235, 141, 33, 236, 113, 129, 38, 153, 212, 151,
        159, 36, 91, 248, 88, 148, 82, 0, 0, 0, 200, 0, 7, 79, 237, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 8, 109, 117, 108, 116, 105, 115, 105, 103, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
        5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 91, 92, 169, 233, 46, 24, 87, 211, 69, 64, 116, 83, 217,
        137, 12, 192, 107, 5, 108, 128, 201, 26, 99, 99, 202, 200, 213, 142, 66, 255, 215, 110, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 248, 88, 148, 82, 0, 0, 0, 64, 226, 212, 137, 138, 103,
        157, 155, 165, 244, 132, 56, 67, 111, 205, 101, 21, 183, 235, 255, 140, 131, 62, 221, 33,
        26, 166, 28, 110, 114, 190, 205, 139, 201, 213, 122, 155, 34, 231, 185, 27, 226, 22, 211,
        6, 140, 85, 94, 228, 208, 146, 233, 223, 174, 97, 190, 157, 111, 161, 111, 190, 159, 191,
        50, 5, 232, 94, 13, 245, 20, 80, 6, 195, 46, 117, 64, 169, 185, 129, 16, 146, 100, 52, 49,
        48, 190, 192, 60, 78, 176, 4, 155, 210, 242, 225, 161, 112,
    ];

    let result: Result<xdr::AuthenticatedMessage, serde_xdr::CompatDeserializationError> =
        from_bytes(xdr_input);

    assert!(result.is_ok(), println!("{:?}", result));
}
